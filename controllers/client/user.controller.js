const User = require("../../models/user.model");
const ForgotPassword = require("../../models/forgot-password.model");
const sendMailHelper = require("../../helpers/sendMail");
const bcrypt = require("bcryptjs");
const jwtHelper = require("../../helpers/jwt");
const jwt = require("jsonwebtoken");

module.exports.getUser = async (req, res) => {
  try {
    const { id } = req.params;

    const user = await User.findOne({ _id: id }).select("-password");
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json({ user });
  } catch (error) {
    console.error("‚ùå L·ªói:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

module.exports.editUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { fullName, email, phone } = req.body;

    // T√¨m user tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // C·∫≠p nh·∫≠t user
    await User.updateOne({ _id: id }, { fullName, email, phone });

    // L·∫•y l·∫°i th√¥ng tin user sau khi c·∫≠p nh·∫≠t
    const updatedUser = await User.findById(id).select("-password");

    res.status(200).json({ user: updatedUser });
  } catch (error) {
    console.error("‚ùå L·ªói:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};


module.exports.registerPost = async (req, res) => {
  try {
    const { fullName, email, password, phone } = req.body;

    const existUser = await User.findOne({ email });
    if (existUser) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o database
    const hashedPassword = await bcrypt.hash(password, 10);

    const user = new User({ fullName, email, password: hashedPassword, phone });
    await user.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

module.exports.loginPost = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email, deleted: false });

    if (!user) {
      return res
        .status(400)
        .json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    // So s√°nh m·∫≠t kh·∫©u ph·∫£i c√≥ await
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res
        .status(400)
        .json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    const accessToken = jwtHelper.generateAccessToken(user);
    const refreshToken = jwtHelper.generateRefreshToken(user);

    // L∆∞u refreshToken v√†o HTTP-Only Cookie
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: true, // Ch·ªâ d√πng tr√™n HTTPS
      sameSite: "Strict", // NgƒÉn ch·∫∑n CSRF
      path: "/",
    });

    res.status(200).json({ accessToken });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

module.exports.logout = (req, res) => {
  res.clearCookie("refreshToken");
  res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
};

module.exports.forgotPasswordPost = async (req, res) => {
  try {
    const { email } = req.body;

    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email, deleted: false });
    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    // X√≥a OTP c≈© n·∫øu c√≥
    await ForgotPassword.deleteOne({ email });

    // T·∫°o m√£ OTP m·ªõi (6 s·ªë)
    const otp = Math.floor(100000 + Math.random() * 900000).toString();

    // L∆∞u OTP m·ªõi v√†o database, h·∫øt h·∫°n sau 3 ph√∫t
    const forgotPassword = new ForgotPassword({
      email,
      otp,
      expireAt: new Date(Date.now() + 3 * 60 * 1000), // +3 ph√∫t
    });

    await forgotPassword.save();

    // G·ª≠i OTP qua email
    const subject = "M√£ OTP x√°c minh l·∫•y l·∫°i m·∫≠t kh·∫©u";
    const html = `<p>M√£ OTP c·ªßa b·∫°n l√†: <b>${otp}</b>. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 3 ph√∫t.</p>`;

    try {
      sendMailHelper.sendMail(email, subject, html);
    } catch (emailError) {
      console.error("‚ùå L·ªói g·ª≠i email:", emailError);
      return res
        .status(500)
        .json({ message: "L·ªói g·ª≠i email", error: emailError.message });
    }

    res.status(200).json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email" });
  } catch (error) {
    console.error("‚ùå L·ªói forgotPasswordPost:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

module.exports.otpPasswordPost = async (req, res) => {
  try {
    const { email, otp } = req.body;

    // Ki·ªÉm tra OTP c√≥ t·ªìn t·∫°i kh√¥ng
    const result = await ForgotPassword.findOne({ email, otp });

    if (!result) {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    // Ki·ªÉm tra xem OTP c√≥ h·∫øt h·∫°n kh√¥ng
    if (result.expireAt < new Date()) {
      await ForgotPassword.deleteOne({ email }); // X√≥a OTP h·∫øt h·∫°n
      return res
        .status(400)
        .json({ message: "OTP ƒë√£ h·∫øt h·∫°n, vui l√≤ng y√™u c·∫ßu l·∫°i" });
    }

    // X√°c th·ª±c th√†nh c√¥ng -> T√¨m user
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Tr·∫£ v·ªÅ token ho·∫∑c th√¥ng b√°o th√†nh c√¥ng
    res
      .status(200)
      .json({ message: "OTP h·ª£p l·ªá, ti·∫øp t·ª•c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", email });
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c OTP:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

module.exports.resetPasswordPost = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Ki·ªÉm tra xem email c√≥ h·ª£p l·ªá kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi b·∫±ng bcrypt
    const hashedPassword = await bcrypt.hash(password, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    await User.updateOne({ email }, { password: hashedPassword });

    // X√≥a OTP sau khi ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng
    await ForgotPassword.deleteOne({ email });

    res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

module.exports.refreshToken = async (req, res) => {
  try {
    console.log("üîç Cookies nh·∫≠n ƒë∆∞·ª£c:", req.cookies); // Debug xem c√≥ cookie kh√¥ng

    if (req.cookies.refreshToken) {
      const { refreshToken } = req.cookies;

      jwt.verify(
        refreshToken,
        process.env.JWT_REFRESH_SECRET,
        async (err, decoded) => {
          if (err) {
            return res
              .status(403)
              .json({ message: "Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
          }

          const newAccessToken = jwtHelper.generateAccessToken({
            _id: decoded.userId,
          });

          res.status(200).json({ accessToken: newAccessToken });
        }
      );
    }
  } catch (error) {
    console.error("‚ùå L·ªói refresh token:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
